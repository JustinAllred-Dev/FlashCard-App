{"version":3,"sources":["Layout/Header.js","Layout/NotFound.js","utils/api/index.js","Home/index.js","Deck/DeckCreate.js","Deck/DeckEdit.js","Deck/DeckSelected.js","Deck/Study.js","Card/CardCreate.js","Card/CardEdit.js","Layout/index.js","App.js","index.js"],"names":["Header","className","NotFound","API_BASE_URL","process","headers","Headers","stripCards","deck","cards","fetchJson","url","options","onCancel","a","fetch","response","status","Error","statusText","json","name","console","error","stack","Promise","resolve","listDecks","signal","createDeck","method","body","JSON","stringify","readDeck","deckId","updateDeck","updatedDeck","id","deleteDeck","card","Number","readCard","cardId","updatedCard","deleteCard","append","Home","useState","decks","setDecks","useEffect","getDecks","data","log","deleteHandler","window","confirm","deckList","map","length","description","to","icon","zoomIn","bookIcon","onClick","trashIcon","DeckCreate","history","useHistory","newDeck","setNewDeck","handleChange","target","thisDeck","value","savedDeck","push","homeIcon","onSubmit","event","preventDefault","htmlFor","type","placeholder","onChange","rows","DeckEdit","useParams","editDeck","setEditDeck","loadDeck","loadedDeck","DeckSelected","setDeck","deckDeleteHandler","cardDeleteHandler","cardList","index","front","back","brushIcon","plusIcon","Study","cardFilp","setCardFlip","selectedCard","setSelectedCard","getDeck","handleCardFlip","CardCreate","newCard","setNewCard","selectedDeck","thisCard","createCard","CardEdit","editedCard","setEditedCard","getCard","updateCard","Layout","exact","path","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6c0a96df.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Header() {\n  return (\n    <header className=\"jumbotron bg-dark\">\n      <div className=\"container text-white\">\n        <h1 className=\"display-4\">Flashcard-o-matic</h1>\n        <p className=\"lead\">Discover The Flashcard Difference.</p>\n      </div>\n    </header>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\n\nfunction NotFound() {\n  return (\n    <div className=\"NotFound\">\n      <h1>Not Found</h1>\n    </div>\n  );\n}\n\nexport default NotFound;\n","/**\n * Defines the base URL for the API.\n * The default values is overridden by the `API_BASE_URL` environment variable.\n */\nconst API_BASE_URL = process.env.API_BASE_URL || \"http://localhost:5000\";\n\n/**\n * Defines the default headers for these functions to work with `json-server`\n */\nconst headers = new Headers();\nheaders.append(\"Content-Type\", \"application/json\");\n\n/**\n * Removes the `cards` property from the deck so it is not accidentally saved with the deck.\n *\n * This function is NOT exported because it is not needed outside of this file.\n *\n * @param deck\n *  the deck instance\n * @returns {*}\n *  a copy of the deck instance with the `cards` property removed.\n */\nfunction stripCards(deck) {\n  const { cards, ...deckWithoutCards } = deck;\n  return deckWithoutCards;\n}\n\n/**\n * Fetch `json` from the specified URL and handle error status codes and ignore `AbortError`s\n *\n * This function is NOT exported because it is not needed outside of this file.\n *\n * @param url\n *  the url for the requst.\n * @param options\n *  any options for fetch\n * @param onCancel\n *  default value returned if the fetch is cancelled.\n * @returns {Promise<Error|any>}\n *  a promise that resolves to the `json` data or an error.\n *  If the response is not in the 200 - 399 range the promise is rejected.\n */\n\nasync function fetchJson(url, options, onCancel) {\n  try {\n    const response = await fetch(url, options);\n\n    if (response.status < 200 || response.status > 399) {\n      throw new Error(`${response.status} - ${response.statusText}`);\n    }\n\n    if (response.status === 204) {\n      return null;\n    }\n\n    return await response.json();\n  } catch (error) {\n    if (error.name !== \"AbortError\") {\n      console.error(error.stack);\n      throw error;\n    }\n    return Promise.resolve(onCancel);\n  }\n}\n\n/**\n * Retrieves all existing decks.\n * @returns {Promise<[deck]>}\n *  a promise that resolves to a possibly empty array of decks saved in the database.\n */\nexport async function listDecks(signal) {\n  const url = `${API_BASE_URL}/decks?_embed=cards`;\n  return await fetchJson(url, { signal }, []);\n}\n\n/**\n * Saves deck to the database (public/data/db.json).\n * There is no validation done on the deck object, any object will be saved.\n * @param deck\n *  the deck to save, which must not have an `id` property\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<deck>}\n *  a promise that resolves the saved deck, which will now have an `id` property.\n */\nexport async function createDeck(deck, signal) {\n  const url = `${API_BASE_URL}/decks`;\n  const options = {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(stripCards(deck)),\n    signal,\n  };\n  return await fetchJson(url, options, {});\n}\n\n/**\n * Retrieves the deck with the specified `deckId`\n * @param deckId\n *  the `id` property matching the desired deck.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<any>}\n *  a promise that resolves to the saved deck.\n */\nexport async function readDeck(deckId, signal) {\n  const url = `${API_BASE_URL}/decks/${deckId}?_embed=cards`;\n  return await fetchJson(url, { signal }, {});\n}\n\n/**\n * Updates an existing deck\n * @param updatedDeck\n *  the deck to save, which must have an `id` property.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the updated deck.\n */\nexport async function updateDeck(updatedDeck, signal) {\n  const url = `${API_BASE_URL}/decks/${updatedDeck.id}?_embed=cards`;\n  const options = {\n    method: \"PUT\",\n    headers,\n    body: JSON.stringify(stripCards(updatedDeck)),\n    signal,\n  };\n  return await fetchJson(url, options, updatedDeck);\n}\n\n/**\n * Deletes the deck with the specified `deckId`.\n * @param deckId\n *  the id of the deck to delete\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to an empty object.\n */\nexport async function deleteDeck(deckId, signal) {\n  const url = `${API_BASE_URL}/decks/${deckId}`;\n  const options = { method: \"DELETE\", signal };\n  return await fetchJson(url, options);\n}\n\n/**\n * Retrieves all cards associated with the specified `deckId`.\n * @param deckId\n *  the id of the target deck\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to a possible empty array of cards.\n */\nexport async function listCards(deckId, signal) {\n  const url = `${API_BASE_URL}/cards?deckId=${deckId}`;\n  return await fetchJson(url, { signal }, []);\n}\n\n/**\n * Creates a new card associated with the specified `deckId`.\n * There is no validation that there is an existing deck with the specified `deckId`.\n * @param deckId\n *  the id of the target deck\n * @param card\n *  the card to create, which must not have an `id` property\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the new card, which will have an `id` property.\n */\nexport async function createCard(deckId, card, signal) {\n  // There is a bug in json-server, if you post to /decks/:deckId/cards the associated deckId is a string\n  // and the card is not related to the deck because the data types of the ID's are different.\n  const url = `${API_BASE_URL}/cards`;\n  card.deckId = Number(deckId);\n  const options = {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(card),\n    signal,\n  };\n  return await fetchJson(url, options, card);\n}\n\n/**\n * Retrieves the card with the specified `cardId`\n * @param cardId\n *  the id of the target\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the saved card.\n */\nexport async function readCard(cardId, signal) {\n  const url = `${API_BASE_URL}/cards/${cardId}`;\n  return await fetchJson(url, { signal }, {});\n}\n\n/**\n * Updates an existing deck\n * @param updatedCard\n *  the card to save, which must have an `id` property.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the updated card.\n */\nexport async function updateCard(updatedCard, signal) {\n  const url = `${API_BASE_URL}/cards/${updatedCard.id}`;\n  const options = {\n    method: \"PUT\",\n    headers,\n    body: JSON.stringify(updatedCard),\n  };\n  return await fetchJson(url, options, updatedCard);\n}\n\n/**\n * Deletes the card with the specified `cardId`.\n * @param cardId\n *  the id of the card to delete\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to an empty object.\n */\nexport async function deleteCard(cardId, signal) {\n  const url = `${API_BASE_URL}/cards/${cardId}`;\n  const options = { method: \"DELETE\", signal };\n  return await fetchJson(url, options);\n}\n","import React, { useEffect, useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport trashIcon from \"@iconify-icons/oi/trash\";\r\nimport bookIcon from \"@iconify-icons/oi/book\";\r\nimport zoomIn from \"@iconify-icons/oi/zoom-in\";\r\nimport { Icon } from \"@iconify/react\";\r\nimport { listDecks, deleteDeck } from \"../utils/api\";\r\n\r\nfunction Home() {\r\n  const [decks, setDecks] = useState([]);\r\n  useEffect(() => {\r\n    setDecks([]);\r\n    getDecks();\r\n  }, []);\r\n\r\n  const getDecks = async () => {\r\n    try {\r\n      const data = await listDecks();\r\n      setDecks(data);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  const deleteHandler = async (deckId) => {\r\n    const confirmation = window.confirm(\r\n      \"Are you sure you want to delete this deck?\"\r\n    );\r\n    if (confirmation) {\r\n      try {\r\n        await deleteDeck(deckId);\r\n        console.log(\"deleted\");\r\n        getDecks();\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n  };\r\n\r\n  const deckList = decks.map((deck) => (\r\n    <li className=\"card mb-3\" key={deck.id}>\r\n      <div className=\"card-body\">\r\n        {\" \"}\r\n        <div className=\"justify-content-between d-flex\">\r\n          <h4 className=\"card-title mb-1\">{deck.name}</h4>\r\n          <p>cards: {deck.cards.length}</p>\r\n        </div>\r\n        <div className=\"card-text mb-1\">{deck.description}</div>\r\n        <Link className=\"btn btn-secondary mr-2\" to={`/decks/${deck.id}`}>\r\n          {<Icon icon={zoomIn} />} View\r\n        </Link>\r\n        <Link className=\"btn btn-primary\" to={`/decks/${deck.id}/study`}>\r\n          {<Icon icon={bookIcon} />} Study\r\n        </Link>\r\n        <button\r\n          className=\"btn btn-danger float-right\"\r\n          onClick={() => deleteHandler(deck.id)}\r\n        >\r\n          <Icon icon={trashIcon} />\r\n        </button>\r\n      </div>\r\n    </li>\r\n  ));\r\n  return (\r\n    <div>\r\n      <Link to=\"/decks/new\" className=\"btn btn-secondary mb-3\">\r\n        Create Deck\r\n      </Link>\r\n      <ul className=\"list-group\">{deckList}</ul>\r\n    </div>\r\n  );\r\n}\r\nexport default Home;\r\n","import React, { useState } from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { Icon } from \"@iconify/react\";\r\nimport homeIcon from \"@iconify-icons/oi/home\";\r\nimport { createDeck } from \"../utils/api\";\r\nfunction DeckCreate() {\r\n  const history = useHistory();\r\n  const [newDeck, setNewDeck] = useState({ name: \"\", description: \"\" });\r\n  const handleChange = ({ target }) => {\r\n    setNewDeck((thisDeck) => ({ ...thisDeck, [target.name]: target.value }));\r\n  };\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    onSubmit(newDeck);\r\n  };\r\n\r\n  async function onSubmit(newDeck) {\r\n    const savedDeck = await createDeck(newDeck);\r\n    history.push(`/decks/${savedDeck.id}`);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <nav aria-label=\"breadcrumb\">\r\n        <ol className=\"breadcrumb\">\r\n          <li className=\"breadcrumb-item\">\r\n            <Link to=\"/\">{<Icon icon={homeIcon} />}Home</Link>\r\n          </li>\r\n          <li className=\"breadcrumb-item\">Create Deck</li>\r\n        </ol>\r\n      </nav>\r\n      <h1>Create Deck</h1>\r\n\r\n      <form onSubmit={handleSubmit}>\r\n        <fieldset>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"name\">\r\n              Name:{\" \"}\r\n              <input\r\n                id=\"name\"\r\n                className=\"form-control\"\r\n                name=\"name\"\r\n                type=\"text\"\r\n                placeholder=\"Name your new deck.\"\r\n                value={newDeck.name}\r\n                onChange={handleChange}\r\n              />\r\n            </label>\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"description\">\r\n              Description:{\" \"}\r\n              <textarea\r\n                id=\"description\"\r\n                className=\"form-control\"\r\n                name=\"description\"\r\n                type=\"text\"\r\n                placeholder=\"Enter a description for the deck.\"\r\n                rows=\"3\"\r\n                value={newDeck.description}\r\n                onChange={handleChange}\r\n              />\r\n            </label>\r\n          </div>\r\n          <Link className=\"btn btn-secondary mr-2\" to=\"/\">\r\n            Cancel\r\n          </Link>\r\n          <button className=\"btn btn-primary\" type=\"submit\">\r\n            Submit\r\n          </button>\r\n        </fieldset>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\nexport default DeckCreate;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useHistory, useParams, Link } from \"react-router-dom\";\r\nimport { Icon } from \"@iconify/react\";\r\nimport homeIcon from \"@iconify-icons/oi/home\";\r\nimport { updateDeck, readDeck } from \"../utils/api\";\r\nfunction DeckEdit() {\r\n  const history = useHistory();\r\n  const { deckId } = useParams();\r\n  const [editDeck, setEditDeck] = useState({ name: \"\", description: \"\" });\r\n\r\n  useEffect(() => {\r\n    setEditDeck({ name: \"\", description: \"\" });\r\n    loadDeck();\r\n  }, []);\r\n  const loadDeck = async () => {\r\n    const loadedDeck = await readDeck(deckId);\r\n    setEditDeck(loadedDeck);\r\n  };\r\n\r\n  const handleChange = ({ target }) => {\r\n    setEditDeck((thisDeck) => ({ ...thisDeck, [target.name]: target.value }));\r\n  };\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    onSubmit(editDeck);\r\n  };\r\n\r\n  async function onSubmit(editDeck) {\r\n    const savedDeck = await updateDeck(editDeck);\r\n    history.push(`/decks/${savedDeck.id}`);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <nav aria-label=\"breadcrumb\">\r\n        <ol className=\"breadcrumb\">\r\n          <li className=\"breadcrumb-item\">\r\n            <Link to=\"/\">{<Icon icon={homeIcon} />}Home</Link>\r\n          </li>\r\n          <li className=\"breadcrumb-item\">Edit Deck</li>\r\n        </ol>\r\n      </nav>\r\n      <h1>{editDeck.name}</h1>\r\n\r\n      <form onSubmit={handleSubmit}>\r\n        <fieldset>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"name\">\r\n              Name:{\" \"}\r\n              <input\r\n                id=\"name\"\r\n                className=\"form-control\"\r\n                name=\"name\"\r\n                type=\"text\"\r\n                placeholder=\"Name your deck.\"\r\n                value={editDeck.name}\r\n                onChange={handleChange}\r\n              />\r\n            </label>\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"description\">\r\n              Description:{\" \"}\r\n              <textarea\r\n                id=\"description\"\r\n                className=\"form-control\"\r\n                name=\"description\"\r\n                type=\"text\"\r\n                placeholder=\"Enter a description for the deck.\"\r\n                rows=\"3\"\r\n                value={editDeck.description}\r\n                onChange={handleChange}\r\n              />\r\n            </label>\r\n          </div>\r\n          <Link className=\"btn btn-secondary mr-2\" to={`/decks/${editDeck.id}`}>\r\n            Cancel\r\n          </Link>\r\n          <button className=\"btn btn-primary\" type=\"submit\">\r\n            Submit\r\n          </button>\r\n        </fieldset>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\nexport default DeckEdit;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useParams, useHistory, Link } from \"react-router-dom\";\r\nimport { readDeck, deleteDeck, deleteCard } from \"../utils/api\";\r\nimport { Icon } from \"@iconify/react\";\r\nimport homeIcon from \"@iconify-icons/oi/home\";\r\nimport trashIcon from \"@iconify-icons/oi/trash\";\r\nimport bookIcon from \"@iconify-icons/oi/book\";\r\nimport brushIcon from \"@iconify-icons/oi/brush\";\r\nimport plusIcon from \"@iconify-icons/oi/plus\";\r\n\r\nfunction DeckSelected() {\r\n  const history = useHistory();\r\n  const { deckId } = useParams();\r\n  const [deck, setDeck] = useState({\r\n    name: \"Loading...\",\r\n    description: \"\",\r\n    cards: [],\r\n  });\r\n  useEffect(() => {\r\n    loadDeck();\r\n  }, [deckId]);\r\n\r\n  const loadDeck = async () => {\r\n    const loadedDeck = await readDeck(deckId);\r\n    setDeck(loadedDeck);\r\n  };\r\n\r\n  const deckDeleteHandler = async (deckId) => {\r\n    const confirmation = window.confirm(\r\n      \"Are you sure you want to delete this deck?\"\r\n    );\r\n    if (confirmation) {\r\n      await deleteDeck(deckId);\r\n      history.push(\"/\");\r\n    }\r\n  };\r\n\r\n  const cardDeleteHandler = async (cardId) => {\r\n    const confirmation = window.confirm(\r\n      \"Are you sure you want to delete this card?\"\r\n    );\r\n    if (confirmation) {\r\n      await deleteCard(cardId);\r\n      loadDeck();\r\n    }\r\n  };\r\n\r\n  const cardList = deck.cards.map((card, index) => (\r\n    <li className=\"card mb-1\" key={index}>\r\n      <div className=\"card-body\">\r\n        {\" \"}\r\n        <div className=\"justify-content-between d-flex mb-2\">\r\n          <div className=\"col\">{card.front}</div>\r\n          <div className=\"col\">{card.back}</div>\r\n        </div>\r\n        <div className=\"float-right\">\r\n          <Link\r\n            className=\"btn btn-secondary mr-2\"\r\n            to={`/decks/${deck.id}/${card.id}/edit`}\r\n          >\r\n            {<Icon icon={brushIcon} />} Edit\r\n          </Link>\r\n          <button\r\n            className=\"btn btn-danger float-right\"\r\n            onClick={() => cardDeleteHandler(card.id)}\r\n          >\r\n            {<Icon icon={trashIcon} />}\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </li>\r\n  ));\r\n  return (\r\n    <div>\r\n      <nav aria-label=\"breadcrumb\">\r\n        <ol className=\"breadcrumb\">\r\n          <li className=\"breadcrumb-item\">\r\n            <Link to=\"/\">{<Icon icon={homeIcon} />}Home</Link>\r\n          </li>\r\n          <li className=\"breadcrumb-item\">{deck.name}</li>\r\n        </ol>\r\n      </nav>\r\n      <h1>{deck.name}</h1>\r\n      <p>{deck.description}</p>\r\n      <div>\r\n        <Link className=\"btn btn-secondary mr-2\" to={`/decks/${deck.id}/edit`}>\r\n          {<Icon icon={brushIcon} />} Edit\r\n        </Link>\r\n        <Link className=\"btn btn-primary mr-2\" to={`/decks/${deck.id}/study`}>\r\n          {<Icon icon={bookIcon} />} Study\r\n        </Link>\r\n        <Link className=\"btn btn-primary\" to={`/decks/${deck.id}/cards/new`}>\r\n          {<Icon icon={plusIcon} />} Add Cards\r\n        </Link>\r\n        <button\r\n          className=\"btn btn-danger float-right\"\r\n          onClick={() => deckDeleteHandler(deck.id)}\r\n        >\r\n          <Icon icon={trashIcon} />\r\n        </button>\r\n        <h1 className=\"mt-2\">Cards</h1>\r\n        <ul className=\"list-group\">{cardList}</ul>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nexport default DeckSelected;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useParams, useHistory, Link } from \"react-router-dom\";\r\nimport { readDeck } from \"../utils/api\";\r\nimport { Icon } from \"@iconify/react\";\r\nimport homeIcon from \"@iconify-icons/oi/home\";\r\n\r\nfunction Study() {\r\n  const { deckId } = useParams();\r\n  const history = useHistory();\r\n  const [deck, setDeck] = useState({ name: \"Loading...\", cards: [] });\r\n  const [cardFilp, setCardFlip] = useState(false);\r\n  const [selectedCard, setSelectedCard] = useState(0);\r\n\r\n  useEffect(() => {\r\n    setDeck({ name: \"Loading...\", cards: [] });\r\n    async function getDeck() {\r\n      try {\r\n        const thisDeck = await readDeck(deckId);\r\n        setDeck(thisDeck);\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n    getDeck();\r\n  }, [deckId]);\r\n\r\n  const handleCardFlip = () => {\r\n    setCardFlip(!cardFilp);\r\n  };\r\n\r\n  const handleCardChange = () => {\r\n    if (selectedCard + 1 !== deck.cards.length) {\r\n      handleCardFlip();\r\n      setSelectedCard(selectedCard + 1);\r\n    } else {\r\n      const confirmation = window.confirm(\r\n        \"Restart Cards? Click 'Cancel' to return to the home page.\"\r\n      );\r\n      if (confirmation) {\r\n        handleCardFlip();\r\n        setSelectedCard(0);\r\n      } else {\r\n        history.push(\"/\");\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <nav aria-label=\"breadcrumb\">\r\n        <ol className=\"breadcrumb\">\r\n          <li className=\"breadcrumb-item\">\r\n            <Link to=\"/\">{<Icon icon={homeIcon} />}Home</Link>\r\n          </li>\r\n          <li className=\"breadcrumb-item\">{deck.name}</li>\r\n          <li className=\"breadcrumb-item\">Study</li>\r\n        </ol>\r\n      </nav>\r\n      <h1>Study: {deck.name}</h1>\r\n      {deck.cards.length <= 2 ? (\r\n        <div className=\"card mt-2\">\r\n          <div className=\"card-body\">\r\n            <h4 className=\"card-title mb-1\">Not enough cards.</h4>\r\n            <div className=\"card-text mb-1\">\r\n              You need at least 3 cards to study.\r\n            </div>\r\n            <Link className=\"btn btn-primary\" to={`/decks/${deckId}/cards/new`}>\r\n              Add Cards\r\n            </Link>\r\n          </div>\r\n        </div>\r\n      ) : cardFilp === false ? (\r\n        <div className=\"card mt-2\" key={selectedCard}>\r\n          <div className=\"card-body\">\r\n            <h4 className=\"card-title mb-1\">\r\n              {selectedCard + 1} of {deck.cards.length}\r\n            </h4>\r\n            <div className=\"card-text mb-3\">\r\n              {deck.cards[selectedCard].front}\r\n            </div>\r\n            <button className=\"btn btn-secondary mr-2\" onClick={handleCardFlip}>\r\n              Flip\r\n            </button>\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <div className=\"card mt-2\" key={selectedCard}>\r\n          <div className=\"card-body\">\r\n            <h4 className=\"card-title mb-1\">\r\n              {selectedCard + 1} of {deck.cards.length}\r\n            </h4>\r\n            <div className=\"card-text mb-3\">\r\n              {deck.cards[selectedCard].back}\r\n            </div>\r\n            <button className=\"btn btn-secondary mr-2\" onClick={handleCardFlip}>\r\n              Flip\r\n            </button>\r\n            <button className=\"btn btn-primary\" onClick={handleCardChange}>\r\n              Next\r\n            </button>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\nexport default Study;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Link, useHistory, useParams } from \"react-router-dom\";\r\nimport { Icon } from \"@iconify/react\";\r\nimport homeIcon from \"@iconify-icons/oi/home\";\r\nimport { createCard, readDeck } from \"../utils/api\";\r\nfunction CardCreate() {\r\n  const history = useHistory();\r\n  const { deckId } = useParams();\r\n  const [deck, setDeck] = useState(\"Loading...\");\r\n  const [newCard, setNewCard] = useState({ front: \"\", back: \"\" });\r\n\r\n  useEffect(() => {\r\n    setNewCard({ front: \"\", back: \"\" });\r\n    setDeck(\"Loading...\");\r\n    async function getDeck() {\r\n      const selectedDeck = await readDeck(deckId);\r\n      setDeck(selectedDeck);\r\n    }\r\n    getDeck();\r\n  }, []);\r\n  const handleChange = ({ target }) => {\r\n    setNewCard((thisCard) => ({ ...thisCard, [target.name]: target.value }));\r\n  };\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    onSubmit(newCard);\r\n    setNewCard({ front: \"\", back: \"\" });\r\n  };\r\n\r\n  const onSubmit = (newCard) => {\r\n    createCard(deckId, newCard);\r\n  };\r\n\r\n  const onFinished = () => {\r\n    history.push(`/decks/${deckId}`);\r\n  };\r\n  return (\r\n    <div>\r\n      <nav aria-label=\"breadcrumb\">\r\n        <ol className=\"breadcrumb\">\r\n          <li className=\"breadcrumb-item\">\r\n            <Link to=\"/\">{<Icon icon={homeIcon} />}Home</Link>\r\n          </li>\r\n          <li className=\"breadcrumb-item\">{deck.name}</li>\r\n          <li className=\"breadcrumb-item\">Add Card</li>\r\n        </ol>\r\n      </nav>\r\n      <h1>{deck.name}: Add Card</h1>\r\n\r\n      <form onSubmit={handleSubmit}>\r\n        <fieldset>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"front\">\r\n              Front:{\" \"}\r\n              <textarea\r\n                id=\"front\"\r\n                className=\"form-control\"\r\n                name=\"front\"\r\n                type=\"text\"\r\n                placeholder=\"Front of card:\"\r\n                rows=\"3\"\r\n                value={newCard.front}\r\n                onChange={handleChange}\r\n              />\r\n            </label>\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"back\">\r\n              Back:{\" \"}\r\n              <textarea\r\n                id=\"back\"\r\n                className=\"form-control\"\r\n                name=\"back\"\r\n                type=\"text\"\r\n                placeholder=\"Back of card:\"\r\n                rows=\"3\"\r\n                value={newCard.back}\r\n                onChange={handleChange}\r\n              />\r\n            </label>\r\n          </div>\r\n          <Link className=\"btn btn-secondary mr-2\" onClick={onFinished}>\r\n            Done\r\n          </Link>\r\n          <button className=\"btn btn-primary\" type=\"submit\">\r\n            Submit\r\n          </button>\r\n        </fieldset>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\nexport default CardCreate;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Link, useHistory, useParams } from \"react-router-dom\";\r\nimport { Icon } from \"@iconify/react\";\r\nimport homeIcon from \"@iconify-icons/oi/home\";\r\nimport { readDeck, updateCard, readCard } from \"../utils/api\";\r\nfunction CardEdit() {\r\n  const history = useHistory();\r\n  const { cardId, deckId } = useParams();\r\n  const [deck, setDeck] = useState(\"Loading...\");\r\n  const [editedCard, setEditedCard] = useState({ id: \"\", front: \"\", back: \"\" });\r\n\r\n  useEffect(() => {\r\n    setEditedCard({ id: \"\", front: \"\", back: \"\" });\r\n    setDeck(\"Loading...\");\r\n    async function getCard() {\r\n      const selectedCard = await readCard(cardId);\r\n      setEditedCard(selectedCard);\r\n    }\r\n    async function getDeck() {\r\n      const selectedDeck = await readDeck(deckId);\r\n      setDeck(selectedDeck);\r\n    }\r\n    getCard();\r\n    getDeck();\r\n  }, []);\r\n  const handleChange = ({ target }) => {\r\n    setEditedCard((thisCard) => ({ ...thisCard, [target.name]: target.value }));\r\n  };\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    onSubmit(editedCard);\r\n    history.push(`/decks/${deckId}`);\r\n  };\r\n\r\n  const onSubmit = (editedCard) => {\r\n    updateCard(editedCard);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <nav aria-label=\"breadcrumb\">\r\n        <ol className=\"breadcrumb\">\r\n          <li className=\"breadcrumb-item\">\r\n            <Link to=\"/\">{<Icon icon={homeIcon} />}Home</Link>\r\n          </li>\r\n          <li className=\"breadcrumb-item\">{deck.name}</li>\r\n          <li className=\"breadcrumb-item\">Edit Card {cardId}</li>\r\n        </ol>\r\n      </nav>\r\n      <h1>Edit Card</h1>\r\n\r\n      <form onSubmit={handleSubmit}>\r\n        <fieldset>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"front\">\r\n              Name:{\" \"}\r\n              <input\r\n                id=\"front\"\r\n                className=\"form-control\"\r\n                name=\"front\"\r\n                type=\"text\"\r\n                placeholder=\"Front of card:\"\r\n                value={editedCard.front}\r\n                onChange={handleChange}\r\n              />\r\n            </label>\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"back\">\r\n              Description:{\" \"}\r\n              <textarea\r\n                id=\"back\"\r\n                className=\"form-control\"\r\n                name=\"back\"\r\n                type=\"text\"\r\n                placeholder=\"Back of card:\"\r\n                rows=\"3\"\r\n                value={editedCard.back}\r\n                onChange={handleChange}\r\n              />\r\n            </label>\r\n          </div>\r\n          <Link className=\"btn btn-secondary mr-2\" to={`/decks/${deckId}`}>\r\n            Cancel\r\n          </Link>\r\n          <button className=\"btn btn-primary\" type=\"submit\">\r\n            Submit\r\n          </button>\r\n        </fieldset>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\nexport default CardEdit;\r\n","import React from \"react\";\nimport Header from \"./Header\";\nimport NotFound from \"./NotFound\";\nimport Home from \"../Home\";\nimport DeckCreate from \"../Deck/DeckCreate\";\nimport DeckEdit from \"../Deck/DeckEdit\";\nimport DeckSelected from \"../Deck/DeckSelected\";\nimport Study from \"../Deck/Study\";\nimport CardCreate from \"../Card/CardCreate\";\nimport CardEdit from \"../Card/CardEdit\";\nimport { Route, Switch } from \"react-router-dom\";\n\nfunction Layout() {\n  return (\n    <div>\n      <Header />\n      <div className=\"container\">\n        {/* TODO: Implement the screen starting here */}\n        <Switch>\n          <Route exact={true} path=\"/\">\n            <Home />\n          </Route>\n          <Route path=\"/decks/new\">\n            <DeckCreate />\n          </Route>\n          <Route path=\"/decks/:deckId\" exact={true}>\n            <DeckSelected />\n          </Route>\n          <Route path=\"/decks/:deckId/edit\">\n            <DeckEdit />\n          </Route>\n          <Route path=\"/decks/:deckId/study\">\n            <Study />\n          </Route>\n          <Route path=\"/decks/:deckId/cards/new\">\n            <CardCreate />\n          </Route>\n          <Route path=\"/decks/:deckId/:cardId/edit\">\n            <CardEdit />\n          </Route>\n          <Route>\n            <NotFound />\n          </Route>\n        </Switch>\n      </div>\n    </div>\n  );\n}\n\nexport default Layout;\n","import React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport Layout from \"./Layout\";\n\n/**\n * App is a wrapper for <Layout>, you should not need to change this file.\n */\n\nfunction App() {\n  return (\n    <div className=\"app-routes\">\n      <Switch>\n        <Route path=\"/\">\n          <Layout />\n        </Route>\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}